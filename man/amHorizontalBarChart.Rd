% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/horizontalBarChart.R
\name{amHorizontalBarChart}
\alias{amHorizontalBarChart}
\title{Horizontal bar chart}
\usage{
amHorizontalBarChart(inputId, width = "100\%", height = "400px", data,
  data2 = NULL, category, value, valueNames = value, minValue,
  maxValue, valueFormatter = "#.", draggable = rep(FALSE,
  length(value)), tooltip = list(text = "[bold]{name}: {valueX}[/]",
  labelColor = "#ffffff", backgroundColor = "#101010", backgroundOpacity =
  1, scale = 1), chartTitle = NULL, columnStyle = list(fill =
  rep(list(NULL), length(value)), stroke = NULL, cornerRadius = NULL),
  backgroundColor = NULL, cellWidth = 90,
  columnWidth = ifelse(length(value) == 1, 100, 90), xAxis = list(title
  = list(text = category, fontSize = 20, color = NULL), labels = list(color
  = NULL, fontSize = 18, rotation = 0)), yAxis = list(title = if
  (length(value) == 1) {     list(text = value, fontSize = 20, color =
  NULL) } else NULL, labels = list(color = NULL, fontSize = 18, rotation =
  0)), scrollbarX = FALSE, scrollbarY = FALSE, gridLines = list(color
  = NULL, opacity = NULL, width = NULL), legend = length(value) > 1,
  caption = NULL, button = if (is.null(data2)) NULL else list(text =
  "Reset", color = NULL, fill = NULL, position = 0.8), theme = NULL,
  style = "")
}
\arguments{
\item{inputId}{the id of the container}

\item{width}{width in CSS units}

\item{height}{height in CSS units}

\item{data}{a dataframe}

\item{data2}{a dataframe used to update the data with the button}

\item{category}{name of the column of \code{data} to be used on the
category axis}

\item{value}{name(s) of the column(s) of \code{data} to be used on the
value axis}

\item{valueNames}{names of the values variables, to appear in the legend}

\item{minValue}{minimum value}

\item{maxValue}{maximum value}

\item{valueFormatter}{a number formatter; see
\url{https://www.amcharts.com/docs/v4/concepts/formatters/formatting-numbers/}}

\item{draggable}{logical vector, one entry for each value; whether the
corresponding colum is draggable}

\item{tooltip}{tooltip settings given as a list, or just a string for the
\code{text} field, or \code{NULL} for no tooltip; the \code{text} field is
given as a formatted string; see
\url{https://www.amcharts.com/docs/v4/concepts/formatters/formatting-strings/}}

\item{chartTitle}{chart title, \code{NULL}, character, or list of settings}

\item{columnStyle}{settings of the columns style given as a list}

\item{backgroundColor}{a HTML color for the chart background}

\item{cellWidth}{cell width in percent; for a simple bar chart, this is the
width of the columns; for a grouped bar chart, this is the width of the
clusters of columns}

\item{columnWidth}{column width, a percentage of the cell width; set to 100
for a simple bar chart and use \code{cellWidth} to control the width of the
columns; for a grouped bar chart, this controls the spacing between the
columns within a cluster of columns}

\item{xAxis}{settings of the value axis given as a list, or just a string
for the axis title}

\item{yAxis}{settings of the category axis given as a list, or just a string
for the axis title}

\item{scrollbarX}{logical, whether to add a scrollbar for the value axis}

\item{scrollbarY}{logical, whether to add a scrollbar for the category axis}

\item{gridLines}{settings of the grid lines}

\item{legend}{logical, whether to display the legend}

\item{caption}{settings of the caption, or \code{NULL} for no caption}

\item{button}{\code{NULL} for no button, or settings of the buttons given as
a list with these fields: \code{text} for the button label, \code{color} for
the label color, \code{fill} for the button color, and \code{position}
for the button position as a percentage (\code{0} for bottom,
\code{1} for top); this button is used to replace the current data
with \code{data2}}

\item{theme}{theme, \code{NULL} or one of \code{"dataviz"}, \code{"material"},
\code{"kelly"}, \code{"dark"}, \code{"moonrisekingdom"},
\code{"frozen"}, \code{"spiritedaway"}}

\item{style}{inline CSS for the container}
}
\description{
Constructs a horizontal bar chart.
}
\examples{
if(interactive()){

  # simple bar chart ####

  library(shiny)
  library(shinyAmBarCharts)

  dat <- data.frame(
    country = c("USA", "China", "Japan", "Germany", "UK", "France"),
    visits = c(3025, 1882, 1809, 1322, 1122, 1114)
  )

  ui <- fluidPage(
    fluidRow(
      column(10,
             amHorizontalBarChart(
               "mybarchart", data = dat, height = "550px",
               category = "country", value = "visits",
               draggable = TRUE,
               tooltip = "[font-style:italic;#ffff00]{valueX}[/]",
               chartTitle =
                list(text = "Visits per country", fontSize = 22, color = "orangered"),
               xAxis = list(title = list(text = "Visits", color = "maroon")),
               yAxis = list(title = list(text = "Country", color = "maroon")),
               minValue = 0, maxValue = 4000,
               valueFormatter = "#.",
               caption = list(text = "Year 2018", color = "red"),
               theme = "moonrisekingdom")),
      column(2,
             tags$label("Data:"),
             verbatimTextOutput("data"),
             br(),
             tags$label("Change:"),
             verbatimTextOutput("change"))
    )

  )

  server <- function(input, output){

    output[["data"]] <- renderPrint({
      input[["mybarchart"]]
    })

    output[["change"]] <- renderPrint({ input[["mybarchart_change"]] })

  }

  shinyApp(ui, server)

}

if(interactive()){

  # grouped bar chart ####

  library(shiny)
  library(shinyAmBarCharts)

  dat0 <- data.frame(
    country = c("USA", "China", "Japan", "Germany", "UK", "France"),
    visits = rep(2000, 6),
    income = rep(25, 6),
    expenses = rep(20, 6)
  )
  set.seed(666)
  dat <- data.frame(
    visits = c(3025, 1882, 1809, 1322, 1122, 1114),
    income = rpois(6, 25),
    expenses = rpois(6, 20)
  )

  ui <- fluidPage(

    fluidRow(
      column(9,
             amHorizontalBarChart(
               "mygroupedbarchart", data = dat0, data2 = dat, height = "550px",
               category = "country", value = c("income", "expenses"),
               valueNames = c("Income", "Expenses"),
               draggable = c(TRUE,TRUE),
               button = list(text = "Show real data", position = 0.85),
               backgroundColor = "#30303d",
               columnStyle = list(fill = c("darkmagenta", "darkred"),
                                  stroke = "#cccccc"),
               chartTitle =
                 list(text = "Try to guess the real data (drag the columns)"),
               xAxis = list(title = list(text = "Income and expenses")),
               yAxis = list(title = list(text = "Country")),
               minValue = 0, maxValue = 41,
               valueFormatter = "#.#",
               caption = list(text = "Year 2018"),
               theme = "dark")
      ),
      column(3,
             tags$label("Data:"),
             verbatimTextOutput("data"),
             br(),
             tags$label("Change:"),
             verbatimTextOutput("change"))
    )

  )

  server <- function(input, output){

    output[["data"]] <- renderPrint({
      input[["mygroupedbarchart"]]
    })

    output[["change"]] <- renderPrint({ input[["mygroupedbarchart_change"]] })

  }

  shinyApp(ui, server)

}
}
